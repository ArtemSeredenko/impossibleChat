import React, { useEffect, useRef, useState } from "react";
import "./ChatBot.css";

// 1) —Å—Ç–∞–±–∏–ª—å–Ω—ã–π sessionId –≤ localStorage
const SESSION_KEY = "chat_session_id";
function getSessionId(): string {
  try {
    let id: string | null = localStorage.getItem(SESSION_KEY);
    if (id == null || id === "") {
      const newId =
        (crypto as any)?.randomUUID?.() ??
        `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 10)}`;
      localStorage.setItem(SESSION_KEY, newId);
      return newId;
    }
    return id;
  } catch {
    return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 10)}`;
  }
}

type Message = {
  id: string;
  from: "user" | "bot";
  text: string;
  ts: number;
};

const MAKE_WEBHOOK_URL =
  "https://hook.eu2.make.com/9woeodiordj6x9fj7wiv799jpolqcy55";

// !!! –ó–∞–¥–∞–π –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç –∏ –¥–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ Make (headers.x-webhook-token)
const MAKE_WEBHOOK_SECRET = "snugens_2025";

// --- utils ---

const safeText = (v: unknown) =>
  typeof v === "string" ? v : v == null ? "" : String(v);

const fetchWithTimeout = async (url: string, opts: RequestInit, ms = 15000) => {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), ms);
  try {
    return await fetch(url, { ...opts, signal: controller.signal });
  } finally {
    clearTimeout(id);
  }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ Make
async function postToMake(payload: any, timeoutMs = 20000) {
  return fetchWithTimeout(
    MAKE_WEBHOOK_URL,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Webhook-Token": MAKE_WEBHOOK_SECRET,
      },
      body: JSON.stringify(payload),
    },
    timeoutMs
  );
}

// –õ–æ—è–ª—å–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractPhone(raw: string): string | null {
  if (!raw) return null;
  // —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã/—Å–∫–æ–±–∫–∏/–¥–µ—Ñ–∏—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
  const compact = raw.replace(/[\s\-\(\)]/g, "");
  // –ø—Ä–∏–º–∏—Ç–∏–≤: –∏—â–µ–º 10‚Äì15 —Ü–∏—Ñ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ —Å +
  const m = compact.match(/(\+?\d{10,15})/);
  return m ? m[1] : null;
}

function cleanPhone(p: string): string {
  return p.replace(/[^\d+]/g, "");
}

// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è Make
function parseRelaxed(raw: string) {
  try {
    const parsed = JSON.parse(raw);
    if (parsed && typeof parsed.reply === "string") return parsed.reply.trim();
    if (typeof (parsed?.content ?? parsed?.result) === "string")
      return (parsed.content ?? parsed.result).trim();
  } catch {
    // –Ω–µ JSON ‚Äî –Ω–æ—Ä–º
  }
  const tmp = document.createElement("div");
  tmp.innerHTML = raw;
  return (tmp.textContent || tmp.innerText || "").trim();
}

function ChatBot() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: crypto.randomUUID(),
      from: "bot",
      text: "–ü—Ä–∏–≤—ñ—Ç üëã –Ø –æ–Ω–ª–∞–π–Ω-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –ü–∏—Ç–∞–π —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ.",
      ts: Date.now(),
    },
  ]);
  const [input, setInput] = useState<string>("");
  const [sending, setSending] = useState<boolean>(false);
  const listRef = useRef<HTMLDivElement>(null);

  // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
  useEffect(() => {
    listRef.current?.scrollTo({ top: listRef.current.scrollHeight, behavior: "smooth" });
  }, [messages]);

  const sendMessage = async () => {
    const text = input.trim();
    if (!text || sending) return;

    const sessionId = getSessionId();
    const now = Date.now();
    const page = location.pathname;
    const ua = navigator.userAgent;
    const source = "webChat";

    const userMsg: Message = {
      id: crypto.randomUUID(),
      from: "user",
      text,
      ts: now,
    };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");
    setSending(true);

    // 1) –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Make ‚Üí Sheets
    postToMake({
      event: "message",
      actor: "user",
      message: text,
      sessionId,
      source,
      timestamp: now,
      name: null, // –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –ø–æ–ª–µ "–ò–º—è", –ø–æ–¥—Å—Ç–∞–≤—å —Å—é–¥–∞
      phone: null, // —è–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞, –ø—É—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –ø—É—Ç–∞–µ—Ç—Å—è
      meta: {
        page,
        ua,
      },
    }).catch(() => { /* –Ω–µ –º–µ—à–∞–µ–º UX, –Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å –º–æ–∂–Ω–æ –∫–∏–Ω—É—Ç—å */ });

    // 2) –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî —à–ª—ë–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ "lead" (–¥–ª—è Firebase+Telegram)
    const maybePhone = extractPhone(text);
    if (maybePhone) {
      const phone = cleanPhone(maybePhone);
      postToMake({
        event: "lead",
        sessionId,
        source,
        timestamp: now,
        name: null, // –ø–æ–¥—Å—Ç–∞–≤–∏—à—å –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å –∏–º—è
        phone,
        meta: {
          page,
          ua,
        },
      }).catch(() => {});
    }

    try {
      // 3) –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞ –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞ (–∫–∞–∫ —É —Ç–µ–±—è –∏ –±—ã–ª–æ)
      const res = await postToMake(
        {
          event: "chat",
          message: text,
          sessionId,
          meta: { page, ua },
          source,
        },
        20000
      );

      const raw = await res.text();
      let reply = parseRelaxed(raw);

      if (!reply) {
        reply = res.ok
          ? "–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª(–∞), –Ω–æ –æ—Ç–≤–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç –ø—É—Å—Ç—ã–º ü§î"
          : `–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π ${res.status}`;
      }

      const botMsg: Message = {
        id: crypto.randomUUID(),
        from: "bot",
        text: safeText(reply),
        ts: Date.now(),
      };
      setMessages((prev) => [...prev, botMsg]);

      // 4) –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ Make ‚Üí Sheets
      postToMake({
        event: "message",
        actor: "bot",
        message: botMsg.text,
        sessionId,
        source,
        timestamp: botMsg.ts,
        name: "bot",
        phone: null,
        meta: { page, ua },
      }).catch(() => {});
    } catch (err: any) {
      const reason =
        err?.name === "AbortError"
          ? "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
          : "‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±–æ—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—å Make –∏–ª–∏ —Å–µ—Ç—å.";
      setMessages((prev) => [
        ...prev,
        { id: crypto.randomUUID(), from: "bot", text: reason, ts: Date.now() },
      ]);
    } finally {
      setSending(false);
    }
  };

  const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className="chat-container" role="region" aria-label="–û–Ω–ª–∞–π–Ω-—á–∞—Ç">
      <div ref={listRef} className="chat-messages">
        {messages.map((m) => (
          <div
            key={m.id}
            className={`chat-message ${m.from}`}
            title={new Date(m.ts).toLocaleString()}
          >
            {m.text}
          </div>
        ))}
      </div>

      <div className="chat-input">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={sending ? "–ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç..." : "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..."}
          disabled={sending}
          aria-label="–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
        />
        <button
          onClick={sendMessage}
          disabled={sending}
          aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
          title="Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
        >
          ‚û§
        </button>
      </div>

      <div className="chat-hint">
        –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∂–º–∏ <kbd>Enter</kbd>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
      </div>
    </div>
  );
}
export default ChatBot;
